{"version":3,"sources":["Cell.js","Board.js","App.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","tblBoard","_loop","concat","src_Cell","key","flipCellsAround","defaultProps","App","src_Board","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5eec6224.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe()\n  }\n\n  render() {\n    const classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '')\n\n    return <td className={classes} onClick={this.handleClick} />\n  }\n}\n\nexport default Cell\n","/* eslint-disable no-useless-constructor */\n/* eslint-disable react/require-render-return */\nimport React, { Component } from 'react'\nimport Cell from './Cell'\nimport './styles/styles.css'\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5,\n    chanceLightStartsOn: 0.25,\n  }\n\n  constructor(props) {\n    super(props)\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    const board = []\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = []\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row)\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    const { ncols, nrows } = this.props\n    const board = this.state.board\n    let [y, x] = coord.split('-').map(Number)\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x]\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x)\n    flipCell(y - 1, x)\n    flipCell(y + 1, x)\n    flipCell(y, x - 1)\n    flipCell(y, x + 1)\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell))\n    this.setState({ board: board, hasWon: hasWon })\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    let tblBoard = []\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = []\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        )\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n    }\n    // TODO\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WON!</span>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            <table className='Board'>\n              <tbody>{tblBoard}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Board\n","import React, { Component } from 'react'\nimport Board from './Board'\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/styles.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}